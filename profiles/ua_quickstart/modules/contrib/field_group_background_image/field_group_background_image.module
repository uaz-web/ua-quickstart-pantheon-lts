<?php
/**
 * @file
 * Field Group Background Image module.
 *
 * Defines a field group display formatter that consists in a div with a
 * background.
 */

/**
 * Implements hook_field_group_formatter_info().
 *
 * Define the field group 'Div (with background)'.
 */
function field_group_background_image_field_group_formatter_info() {
  $format_types = array('image');
  if(module_exists('picture')){
    $format_types[] = 'picture';
  }
  return array(
    'display' => array(
      'div_background_image' => array(
        'label' => t('Div (with background)'),
        'format_types' => $format_types,
        'instance_settings' => array(
          'classes' => '',
          'show_label' => '',
          'background_image' => '',
          'image_style' => '',
          'background_color' => '',
          'picture_mapping' => '',
          'fallback_image_style' => '',
        ),
        'default_formatter' => 'image',
      ),
    ),
  );
}

/**
 * Implements hook_field_group_formatter_settings().
 *
 * Provide a settings form for the field group formatter.
 */
function field_group_background_image_field_group_format_settings($group) {

  if ($group->format_type == 'div_background_image') {

    $settings = $group->format_settings['instance_settings'];
    $form['instance_settings']['show_label'] = array(
      '#title' => t('Show label'),
      '#type' => 'select',
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      '#default_value' => isset($settings['show_label']) ? $settings['show_label'] : 0,
      '#weight' => 2,
    );

    $form['instance_settings']['label_element'] = array(
      '#title' => t('Label element'),
      '#type' => 'select',
      '#options' => array('h2' => t('Header 2'), 'h3' => t('Header 3')),
      '#default_value' => isset($settings['label_element']) ? $settings['label_element'] : 'h2',
      '#weight' => 3,
    );

    $options_image = array();
    $options_color = array();
    $fields = field_info_instances($group->entity_type, $group->bundle);
    foreach ($fields as $field_name => $field) {
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'image') {
        $options_image[$field_name] = $field['label'];
      }
      elseif ($field_info['type'] == 'jquery_colorpicker'
        || $field_info['type'] == 'colorfield'
        || $field_info['type'] == 'color_field_rgb') {
        $options_color[$field_name] = $field['label'];
      }
    }

    if (module_exists('image')) {
      $form['instance_settings']['background_image'] = array(
        '#title' => t('Background: Image field'),
        '#type' => 'select',
        '#options' => $options_image,
        '#default_value' => isset($settings['background_image']) ? $settings['background_image'] : '',
        '#empty_option' => t('None'),
        '#weight' => 20,
      );
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $form['instance_settings']['image_style'] = array(
        '#title' => t('Background: Image style'),
        '#type' => 'select',
        '#options' => $image_styles,
        '#default_value' => isset($settings['image_style']) ? $settings['image_style'] : '',
        '#empty_option' => t('None (original image)'),
        '#weight' => 21,
        '#states' => array(
          'visible' => array(
            ':input[name="fields[' . $group->group_name . '][format_settings][settings][formatter]"]' => array('value' => 'image'),
          ),
        ),
      );
    }
    if (module_exists('picture')) {
      $options = picture_get_mapping_options();
      if ($options) {
        $form['instance_settings']['picture_mapping'] = array(
          '#title' => t('Picture mapping'),
          '#type' => 'select',
          '#default_value' => isset($settings['picture_mapping']) ? $settings['picture_mapping'] : '',
          '#required' => TRUE,
          '#options' => picture_get_mapping_options(),
          '#states' => array(
            'visible' => array(
              ':input[name="fields[' . $group->group_name . '][format_settings][settings][formatter]"]' => array('value' => 'picture'),
            ),
          ),
          '#weight' => 21,
        );
      }
      // No picture mappings.
      else {
        $form['instance_settings']['picture_mapping'] = array(
          '#title' => t('Picture mapping'),
          '#type' => 'item',
          '#markup' => t(
            'There are no picture groups defined. !create_link.',
            array('!create_link' => l(t('Create a picture mapping'), 'admin/config/media/picture/add'))
          ),
          '#states' => array(
            'visible' => array(
              ':input[name="fields[' . $group->group_name . '][format_settings][settings][formatter]"]' => array('value' => 'picture'),
            ),
          ),
          '#weight' => 21,
        );
      }

      $image_styles = image_style_options(FALSE);
      $form['instance_settings']['fallback_image_style'] = array(
        '#title' => t('Fallback image style'),
        '#type' => 'select',
        '#default_value' => isset($settings['fallback_image_style']) ? $settings['fallback_image_style'] : '',
        '#empty_option' => t('Automatic'),
        '#options' => $image_styles + array(
          PICTURE_EMPTY_IMAGE => t('Empty image'),
          PICTURE_ORIGINAL_IMAGE => t('Original image'),
        ),
        '#states' => array(
          'visible' => array(
            ':input[name="fields[' . $group->group_name . '][format_settings][settings][formatter]"]' => array('value' => 'picture'),
          ),
        ),
        '#weight' => 21,
      );
    }


    if ($options_color) {

      $form['instance_settings']['background_color'] = array(
        '#title' => t('Background: Color field'),
        '#type' => 'select',
        '#options' => $options_color,
        '#default_value' => isset($settings['background_color']) ? $settings['background_color'] : '',
        '#empty_option' => t('None'),
        '#weight' => 22,
      );
    }

    return $form;
  }
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Render the field group.
 */
function field_group_background_image_field_group_pre_render(&$element, $group, &$form) {
  if ($group->format_type == 'div_background_image') {
    // Get the entity key from the entity type.
    $entity_key = '#' . $form['#entity_type'];

    if (!isset($form[$entity_key])) {

      // Some entity types store the key in an arbitrary name.
      // Check for the ones that we know of.
      switch ($form['#entity_type']) {
        case 'taxonomy_term':
          $entity_key = '#term';
          break;

        case 'user':
          $entity_key = '#account';
          break;

        // Otherwise just search for #entity.
        // The Bean module is one known to use this.
        default:
          $entity_key = '#entity';
      }
    }

    if (isset($form[$entity_key]) && is_object($form[$entity_key])) {

      $entity = $form[$entity_key];
      $id = entity_extract_ids($form['#entity_type'], $entity);
      $selector_class = isset($entity->field_name) ? $form['#entity_type'] . '-' . $id[0] . '-' . $entity->field_name : NULL;
      $formatter = $group->format_settings['formatter'];
      $settings = $group->format_settings['instance_settings'];
      $image_url = '';
      if (!empty($settings['background_image'])) {
        $field_name = $settings['background_image'];
        if (isset($entity->{$field_name})) {
          $field = field_get_items($group->entity_type, $entity, $field_name);
          if ($field && !empty($field[0]['fid'])) {
            $file = file_load($field[0]['fid']);
            switch ($formatter) {
              case 'picture':
                $css = field_group_background_image_generate_background_css($file->uri, $settings['picture_mapping'], '.' . $selector_class );
                if (!empty($css)) {
                  $element['#attached']['css'][] = array(
                    'data' => $css,
                    'type' => 'inline',
                  );
                }
                break;

              default:
                if ($file) {
                  if (!empty($settings['image_style'])) {
                    $image_url = image_style_url($settings['image_style'], $file->uri);
                  }
                  else {
                    $image_url = file_create_url($file->uri);
                  }
                  $info = [
                    'image_style' => !empty($settings['image_style']) ? $settings['image_style'] : NULL,
                  ];
                  // Allow other modules alter image url (to add invalidating cache params
                  // for example).
                  drupal_alter('field_group_background_image_generate', $image_url, $info);
                }
                break;

            }
          }
        }
        $element['#type'] = 'markup';

        $attributes['style'] = '';
        if ($image_url) {
          $attributes['style'] .= "background-image: url('$image_url');";
        }
      }
      $background_color = '';
      if (!empty($settings['background_color'])) {
        $field_name = $settings['background_color'];
        if (isset($entity->{$field_name})) {
           $field = field_get_items($group->entity_type, $entity, $field_name);
           if ($field) {
             if (!empty($field[0]['jquery_colorpicker'])) {

               // Jquery Colorpicker module.
               $background_color = '#' . $field[0]['jquery_colorpicker'];
             }
             elseif (!empty($field[0]['rgb'])) {

               // Colorfield & Color Field module.
               $background_color = $field[0]['rgb'];
             }
           }
         }
      }

      if ($background_color) {
        $attributes['style'] .= "background-color: $background_color;";
      }
      if (!empty($settings['classes'])) {
        $attributes['class'] = $settings['classes'];
      }
      $attributes['class'] .= ' ' . $selector_class;

      $element['#prefix'] = '<div' . drupal_attributes($attributes) . '>';
      $element['#suffix'] = '</div>';

      if (!empty($settings['show_label'])) {
        $label_element = isset($settings['label_element']) ? $settings['label_element'] : 'h2';
        $element['#prefix'] .= '<' . $label_element . '><span>' . check_plain(t($group->label)) . '</span></' . $label_element . '>';
      }

      if (!empty($group->description)) {
        $element['#prefix'] .= '<div class="description">' . $group->description . '</div>';
      }
    }
  }
}

/**
 * CSS Generator Helper Function.
 *
 * @param string $original_uri
 *   URI of the field image.
 * @param array $picture_mapping
 *   Desired picture mapping to generate CSS.
 * @param string $selector
 *   CSS selector to target.
 *
 * @return string
 *   Generated background image CSS.
 *
 * @see field_group_background_image_field_group_pre_render()
 */
function field_group_background_image_generate_background_css($original_uri, $picture_mapping, $selector) {
  $breakpoints = field_group_background_image_picture_breakpoint_data($picture_mapping);
  $css = "";

  foreach ($breakpoints as $breakpoint_size => $breakpoint_styles) {
    if ($breakpoint_size != "default") {
      $css .= '@media ' . $breakpoint_size . ' {';
    }

    foreach ($breakpoint_styles as $multiplier => $style_info) {
      $multiplier = filter_var(rtrim($multiplier, ","), FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION | FILTER_FLAG_ALLOW_THOUSAND);

      if ($style_info['image_style'] == "_original image_") {
        $url = file_create_url($original_uri);
      }
      else {
        $url = image_style_url($style_info['image_style'], $original_uri);
      }
      $info = [
        'image_style' => $style_info['image_style'] != "_original image_" ? $style_info['image_style'] : NULL,
      ];
      // Allow other modules alter image url (to add invalidating cache params
      // for example).
      drupal_alter('field_group_background_image_generate', $url, $info);

      if ($multiplier != 1) {
        $css .= '@media (-webkit-min-device-pixel-ratio: ' . $multiplier . '), (min-resolution: ' . $multiplier * 96 . 'dpi), (min-resolution: ' . $multiplier . 'dppx) {';
      }

      $css .= $selector . ' {background-image: url(' . $url . ');}';

      if ($multiplier != 1) {
        $css .= '}';
      }
    }

    if ($breakpoint_size != "default") {
      $css .= '}';
    }
  }

  return $css;
}

/**
 * Queries the breakpoint data for the requested picture mapping.
 *
 * @param array $picture_mapping
 *   Desired Picture Mapping to pull Breakpoint Data from.
 *
 * @return array
 *   An array of breakpoints, their sizes, and multipliers.
 *
 * @see field_group_background_image_generate_background_css()
 */
function field_group_background_image_picture_breakpoint_data($picture_mapping) {
  $mapping = picture_mapping_load($picture_mapping);
  $mapping_breakpoints = array_reverse(picture_get_mapping_breakpoints($mapping));
  $picture_breakpoint_data = array();

  reset($mapping_breakpoints);
  $first = key($mapping_breakpoints);
  foreach ($mapping_breakpoints as $breakpoint_name => $breakpoint_values) {

    // Mark breakpoint as invalid if it consists of a type other than an
    // image_style type.
    $invalid = FALSE;
    foreach ($breakpoint_values as $values) {
      if ($values['mapping_type'] != "image_style") {
        $invalid = TRUE;
      }
    }

    // Skip invalid breakpoints.
    if ($invalid) {
      watchdog('picture_background_formatter', 'Breakpoint %breakpoint was skipped due to the misconfigured %mapping Picture Mapping.', array('%breakpoint' => $breakpoint_name, '%mapping' => $mapping->label()), WATCHDOG_NOTICE, NULL);
      continue;
    }

    if ($breakpoint_name === $first) {
      $picture_breakpoint_data["default"] = $mapping_breakpoints[$breakpoint_name];
    }
    else {
      $breakpoint_data = breakpoints_breakpoint_load_by_fullkey($breakpoint_name);
      $picture_breakpoint_data[$breakpoint_data->breakpoint] = $mapping_breakpoints[$breakpoint_name];
    }
  }

  return $picture_breakpoint_data;
}
